// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   @default("user") // user or admin
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Email verification fields
  emailVerified Boolean @default(false) @map("email_verified")
  emailVerificationToken String? @map("email_verification_token")
  emailVerificationTokenExpiry DateTime? @map("email_verification_token_expiry")
  
  // Password reset fields
  passwordResetToken String? @map("password_reset_token")
  passwordResetTokenExpiry DateTime? @map("password_reset_token_expiry")

  // Relations
  gamesAsPlayer1 Game[] @relation("Player1Games")
  gamesAsPlayer2 Game[] @relation("Player2Games")
  gamesWon       Game[] @relation("WinnerGames")
  gameActions    GameAction[]

  @@map("users")
}

model Game {
  id               String    @id @default(uuid())
  player1Id        String?   @map("player1_id")
  player2Id        String?   @map("player2_id")
  player1Name      String    @map("player1_name")
  player2Name      String    @map("player2_name")
  player1Mythology String    @map("player1_mythology")
  player2Mythology String    @map("player2_mythology")
  winnerId         String?   @map("winner_id")
  gameData         String?   @map("game_data") // SQLite doesn't have native JSON, use String
  startedAt        DateTime  @default(now()) @map("started_at")
  endedAt          DateTime? @map("ended_at")
  turnCount        Int       @default(0) @map("turn_count")

  // Relations
  player1     User?        @relation("Player1Games", fields: [player1Id], references: [id])
  player2     User?        @relation("Player2Games", fields: [player2Id], references: [id])
  winner      User?        @relation("WinnerGames", fields: [winnerId], references: [id])
  gameActions GameAction[]

  @@index([player1Id])
  @@index([player2Id])
  @@index([startedAt])
  @@map("games")
}

model GameAction {
  id         Int      @id @default(autoincrement())
  gameId     String   @map("game_id")
  playerId   String?  @map("player_id")
  actionType String   @map("action_type")
  actionData String?  @map("action_data") // SQLite doesn't have native JSON, use String
  turnNumber Int?     @map("turn_number")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  game   Game  @relation(fields: [gameId], references: [id])
  player User? @relation(fields: [playerId], references: [id])

  @@index([gameId])
  @@index([turnNumber])
  @@map("game_actions")
}

model Card {
  id          String   @id
  name        String
  type        String   // CardType enum as string
  mythology   String   // Mythology enum as string
  description String
  imageUrl    String?  @map("image_url")
  
  // Beast specific fields
  hp              Int?
  maxHp           Int?     @map("max_hp")
  attacks         String?  // JSON string for attacks array
  passiveEffect   String?  @map("passive_effect") // JSON string for passive effect
  
  // Technique specific fields
  techniqueEffect String?  @map("technique_effect") // JSON string for technique effect
  
  // Artifact specific fields
  artifactEffect  String?  @map("artifact_effect") // JSON string for artifact effect
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cards")
}
